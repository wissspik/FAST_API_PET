{"ast":null,"code":"import axios from'axios';const API_URL='http://127.0.0.1:8000';// Create axios instance with credentials\nconst api=axios.create({baseURL:API_URL,withCredentials:true});// Add response interceptor for handling 401 errors\napi.interceptors.response.use(response=>response,async error=>{var _error$response;const originalRequest=error.config;// If error is 401 and we haven't tried to refresh token yet\nif(((_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status)===401&&!originalRequest._retry){originalRequest._retry=true;try{// Try to refresh token\nawait api.post('/refresh');// Retry the original request\nreturn api(originalRequest);}catch(refreshError){// If refresh fails, redirect to login\nwindow.location.href='/login.html';return Promise.reject(refreshError);}}return Promise.reject(error);});export const authService={// Check if user is authenticated\nasync checkAuth(){try{const response=await api.get('/protected');return response.status===200;}catch(error){return false;}},// Login user\nasync login(login,password){try{const response=await api.post('/entrance',{login,password});if(response.status===200){window.location.href='/dashboard.html';}return response;}catch(error){var _error$response2;if(((_error$response2=error.response)===null||_error$response2===void 0?void 0:_error$response2.status)===409){throw new Error('Неверный логин или пароль');}throw error;}},// Refresh token\nasync refreshToken(){try{const response=await api.post('/refresh');return response.status===200;}catch(error){window.location.href='/login.html';return false;}},// Logout user\nasync logout(){try{await api.post('/logout');window.location.href='/login.html';}catch(error){console.error('Logout error:',error);}}};","map":{"version":3,"names":["axios","API_URL","api","create","baseURL","withCredentials","interceptors","response","use","error","_error$response","originalRequest","config","status","_retry","post","refreshError","window","location","href","Promise","reject","authService","checkAuth","get","login","password","_error$response2","Error","refreshToken","logout","console"],"sources":["C:/MY_PROJECT/frontend/src/services/authService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = 'http://127.0.0.1:8000';\r\n\r\n// Create axios instance with credentials\r\nconst api = axios.create({\r\n  baseURL: API_URL,\r\n  withCredentials: true,\r\n});\r\n\r\n// Add response interceptor for handling 401 errors\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  async (error) => {\r\n    const originalRequest = error.config;\r\n\r\n    // If error is 401 and we haven't tried to refresh token yet\r\n    if (error.response?.status === 401 && !originalRequest._retry) {\r\n      originalRequest._retry = true;\r\n\r\n      try {\r\n        // Try to refresh token\r\n        await api.post('/refresh');\r\n        // Retry the original request\r\n        return api(originalRequest);\r\n      } catch (refreshError) {\r\n        // If refresh fails, redirect to login\r\n        window.location.href = '/login.html';\r\n        return Promise.reject(refreshError);\r\n      }\r\n    }\r\n\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport const authService = {\r\n  // Check if user is authenticated\r\n  async checkAuth() {\r\n    try {\r\n      const response = await api.get('/protected');\r\n      return response.status === 200;\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  },\r\n\r\n  // Login user\r\n  async login(login, password) {\r\n    try {\r\n      const response = await api.post('/entrance', { login, password });\r\n      if (response.status === 200) {\r\n        window.location.href = '/dashboard.html';\r\n      }\r\n      return response;\r\n    } catch (error) {\r\n      if (error.response?.status === 409) {\r\n        throw new Error('Неверный логин или пароль');\r\n      }\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Refresh token\r\n  async refreshToken() {\r\n    try {\r\n      const response = await api.post('/refresh');\r\n      return response.status === 200;\r\n    } catch (error) {\r\n      window.location.href = '/login.html';\r\n      return false;\r\n    }\r\n  },\r\n\r\n  // Logout user\r\n  async logout() {\r\n    try {\r\n      await api.post('/logout');\r\n      window.location.href = '/login.html';\r\n    } catch (error) {\r\n      console.error('Logout error:', error);\r\n    }\r\n  }\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}