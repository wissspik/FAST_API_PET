{"ast":null,"code":"const API_URL = 'http://localhost:8000';\nexport const register = async (login, password, confirmPassword) => {\n  try {\n    const response = await fetch(`${API_URL}/registration`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        login,\n        password,\n        confir_password: confirmPassword\n      })\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error(data.detail || 'Registration failed');\n    }\n    return data;\n  } catch (error) {\n    throw error;\n  }\n};\nexport const login = async (login, password) => {\n  try {\n    const response = await fetch(`${API_URL}/entrance`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        login,\n        password\n      })\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error(data.detail || 'Login failed');\n    }\n\n    // Сохраняем токен в localStorage\n    if (data.token) {\n      localStorage.setItem('token', data.token);\n    }\n    return data;\n  } catch (error) {\n    throw error;\n  }\n};\nexport const logout = async () => {\n  try {\n    const token = localStorage.getItem('token');\n    if (token) {\n      const response = await fetch(`${API_URL}/logout`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      if (!response.ok) {\n        throw new Error('Logout failed');\n      }\n    }\n  } catch (error) {\n    console.error('Logout error:', error);\n  } finally {\n    // В любом случае очищаем данные пользователя\n    localStorage.removeItem('token');\n  }\n};","map":{"version":3,"names":["API_URL","register","login","password","confirmPassword","response","fetch","method","headers","body","JSON","stringify","confir_password","data","json","ok","Error","detail","error","token","localStorage","setItem","logout","getItem","console","removeItem"],"sources":["C:/MY_PROJECT/frontend/src/services/api.js"],"sourcesContent":["const API_URL = 'http://localhost:8000';\r\n\r\nexport const register = async (login, password, confirmPassword) => {\r\n  try {\r\n    const response = await fetch(`${API_URL}/registration`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        login,\r\n        password,\r\n        confir_password: confirmPassword,\r\n      }),\r\n    });\r\n\r\n    const data = await response.json();\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(data.detail || 'Registration failed');\r\n    }\r\n\r\n    return data;\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const login = async (login, password) => {\r\n  try {\r\n    const response = await fetch(`${API_URL}/entrance`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        login,\r\n        password,\r\n      }),\r\n    });\r\n\r\n    const data = await response.json();\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(data.detail || 'Login failed');\r\n    }\r\n\r\n    // Сохраняем токен в localStorage\r\n    if (data.token) {\r\n      localStorage.setItem('token', data.token);\r\n    }\r\n\r\n    return data;\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const logout = async () => {\r\n  try {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      const response = await fetch(`${API_URL}/logout`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${token}`\r\n        },\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Logout failed');\r\n      }\r\n    }\r\n  } catch (error) {\r\n    console.error('Logout error:', error);\r\n  } finally {\r\n    // В любом случае очищаем данные пользователя\r\n    localStorage.removeItem('token');\r\n  }\r\n}; "],"mappings":"AAAA,MAAMA,OAAO,GAAG,uBAAuB;AAEvC,OAAO,MAAMC,QAAQ,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,EAAEC,eAAe,KAAK;EAClE,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGN,OAAO,eAAe,EAAE;MACtDO,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBT,KAAK;QACLC,QAAQ;QACRS,eAAe,EAAER;MACnB,CAAC;IACH,CAAC,CAAC;IAEF,MAAMS,IAAI,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;IAElC,IAAI,CAACT,QAAQ,CAACU,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAACH,IAAI,CAACI,MAAM,IAAI,qBAAqB,CAAC;IACvD;IAEA,OAAOJ,IAAI;EACb,CAAC,CAAC,OAAOK,KAAK,EAAE;IACd,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAMhB,KAAK,GAAG,MAAAA,CAAOA,KAAK,EAAEC,QAAQ,KAAK;EAC9C,IAAI;IACF,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGN,OAAO,WAAW,EAAE;MAClDO,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBT,KAAK;QACLC;MACF,CAAC;IACH,CAAC,CAAC;IAEF,MAAMU,IAAI,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;IAElC,IAAI,CAACT,QAAQ,CAACU,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAACH,IAAI,CAACI,MAAM,IAAI,cAAc,CAAC;IAChD;;IAEA;IACA,IAAIJ,IAAI,CAACM,KAAK,EAAE;MACdC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAER,IAAI,CAACM,KAAK,CAAC;IAC3C;IAEA,OAAON,IAAI;EACb,CAAC,CAAC,OAAOK,KAAK,EAAE;IACd,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAMI,MAAM,GAAG,MAAAA,CAAA,KAAY;EAChC,IAAI;IACF,MAAMH,KAAK,GAAGC,YAAY,CAACG,OAAO,CAAC,OAAO,CAAC;IAC3C,IAAIJ,KAAK,EAAE;MACT,MAAMd,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGN,OAAO,SAAS,EAAE;QAChDO,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClC,eAAe,EAAE,UAAUW,KAAK;QAClC;MACF,CAAC,CAAC;MAEF,IAAI,CAACd,QAAQ,CAACU,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,eAAe,CAAC;MAClC;IACF;EACF,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdM,OAAO,CAACN,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;EACvC,CAAC,SAAS;IACR;IACAE,YAAY,CAACK,UAAU,CAAC,OAAO,CAAC;EAClC;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}