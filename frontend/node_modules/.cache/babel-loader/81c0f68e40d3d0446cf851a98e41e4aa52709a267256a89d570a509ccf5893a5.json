{"ast":null,"code":"export const validateLogin = login => {\n  if (!(8 <= login.length && login.length <= 36)) {\n    return 'Login must be between 8 and 36 characters';\n  }\n  if (!/[a-z]/.test(login)) {\n    return 'Login must contain at least one lowercase letter';\n  }\n  return '';\n};\nexport const validatePassword = password => {\n  if (!(8 <= password.length && password.length <= 36)) {\n    return 'Password must be between 8 and 36 characters';\n  }\n  if (!/[A-Z]/.test(password)) {\n    return 'Password must contain at least one uppercase letter';\n  }\n  if (!/[a-z]/.test(password)) {\n    return 'Password must contain at least one lowercase letter';\n  }\n  if (!/\\d/.test(password)) {\n    return 'Password must contain at least one number';\n  }\n  if (!/[^A-Za-z0-9\\s]/.test(password)) {\n    return 'Password must contain at least one special character';\n  }\n  if (/\\s/.test(password)) {\n    return 'Password cannot contain spaces';\n  }\n  return '';\n};","map":{"version":3,"names":["validateLogin","login","length","test","validatePassword","password"],"sources":["C:/MY_PROJECT/frontend/src/utils/validation.js"],"sourcesContent":["export const validateLogin = (login) => {\r\n  if (!(8 <= login.length && login.length <= 36)) {\r\n    return 'Login must be between 8 and 36 characters';\r\n  }\r\n  if (!/[a-z]/.test(login)) {\r\n    return 'Login must contain at least one lowercase letter';\r\n  }\r\n  return '';\r\n};\r\n\r\nexport const validatePassword = (password) => {\r\n  if (!(8 <= password.length && password.length <= 36)) {\r\n    return 'Password must be between 8 and 36 characters';\r\n  }\r\n  if (!/[A-Z]/.test(password)) {\r\n    return 'Password must contain at least one uppercase letter';\r\n  }\r\n  if (!/[a-z]/.test(password)) {\r\n    return 'Password must contain at least one lowercase letter';\r\n  }\r\n  if (!/\\d/.test(password)) {\r\n    return 'Password must contain at least one number';\r\n  }\r\n  if (!/[^A-Za-z0-9\\s]/.test(password)) {\r\n    return 'Password must contain at least one special character';\r\n  }\r\n  if (/\\s/.test(password)) {\r\n    return 'Password cannot contain spaces';\r\n  }\r\n  return '';\r\n}; "],"mappings":"AAAA,OAAO,MAAMA,aAAa,GAAIC,KAAK,IAAK;EACtC,IAAI,EAAE,CAAC,IAAIA,KAAK,CAACC,MAAM,IAAID,KAAK,CAACC,MAAM,IAAI,EAAE,CAAC,EAAE;IAC9C,OAAO,2CAA2C;EACpD;EACA,IAAI,CAAC,OAAO,CAACC,IAAI,CAACF,KAAK,CAAC,EAAE;IACxB,OAAO,kDAAkD;EAC3D;EACA,OAAO,EAAE;AACX,CAAC;AAED,OAAO,MAAMG,gBAAgB,GAAIC,QAAQ,IAAK;EAC5C,IAAI,EAAE,CAAC,IAAIA,QAAQ,CAACH,MAAM,IAAIG,QAAQ,CAACH,MAAM,IAAI,EAAE,CAAC,EAAE;IACpD,OAAO,8CAA8C;EACvD;EACA,IAAI,CAAC,OAAO,CAACC,IAAI,CAACE,QAAQ,CAAC,EAAE;IAC3B,OAAO,qDAAqD;EAC9D;EACA,IAAI,CAAC,OAAO,CAACF,IAAI,CAACE,QAAQ,CAAC,EAAE;IAC3B,OAAO,qDAAqD;EAC9D;EACA,IAAI,CAAC,IAAI,CAACF,IAAI,CAACE,QAAQ,CAAC,EAAE;IACxB,OAAO,2CAA2C;EACpD;EACA,IAAI,CAAC,gBAAgB,CAACF,IAAI,CAACE,QAAQ,CAAC,EAAE;IACpC,OAAO,sDAAsD;EAC/D;EACA,IAAI,IAAI,CAACF,IAAI,CAACE,QAAQ,CAAC,EAAE;IACvB,OAAO,gCAAgC;EACzC;EACA,OAAO,EAAE;AACX,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}