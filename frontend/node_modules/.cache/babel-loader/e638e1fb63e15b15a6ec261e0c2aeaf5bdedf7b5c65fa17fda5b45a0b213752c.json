{"ast":null,"code":"const API_URL='http://localhost:8000';export const register=async(login,password,confirmPassword)=>{try{const response=await fetch(\"\".concat(API_URL,\"/registration\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({login,password,confir_password:confirmPassword})});const data=await response.json();if(!response.ok){throw new Error(data.detail||'Registration failed');}return data;}catch(error){throw error;}};export const login=async(login,password)=>{try{const response=await fetch(\"\".concat(API_URL,\"/entrance\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({login,password})});const data=await response.json();if(!response.ok){throw new Error(data.detail||'Login failed');}return data;}catch(error){throw error;}};","map":{"version":3,"names":["API_URL","register","login","password","confirmPassword","response","fetch","concat","method","headers","body","JSON","stringify","confir_password","data","json","ok","Error","detail","error"],"sources":["C:/MY_PROJECT/frontend/src/services/api.js"],"sourcesContent":["const API_URL = 'http://localhost:8000';\r\n\r\nexport const register = async (login, password, confirmPassword) => {\r\n  try {\r\n    const response = await fetch(`${API_URL}/registration`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        login,\r\n        password,\r\n        confir_password: confirmPassword,\r\n      }),\r\n    });\r\n\r\n    const data = await response.json();\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(data.detail || 'Registration failed');\r\n    }\r\n\r\n    return data;\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const login = async (login, password) => {\r\n  try {\r\n    const response = await fetch(`${API_URL}/entrance`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        login,\r\n        password,\r\n      }),\r\n    });\r\n\r\n    const data = await response.json();\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(data.detail || 'Login failed');\r\n    }\r\n\r\n    return data;\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n}; "],"mappings":"AAAA,KAAM,CAAAA,OAAO,CAAG,uBAAuB,CAEvC,MAAO,MAAM,CAAAC,QAAQ,CAAG,KAAAA,CAAOC,KAAK,CAAEC,QAAQ,CAAEC,eAAe,GAAK,CAClE,GAAI,CACF,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAC,KAAK,IAAAC,MAAA,CAAIP,OAAO,kBAAiB,CACtDQ,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CAAC,CACDC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CACnBV,KAAK,CACLC,QAAQ,CACRU,eAAe,CAAET,eACnB,CAAC,CACH,CAAC,CAAC,CAEF,KAAM,CAAAU,IAAI,CAAG,KAAM,CAAAT,QAAQ,CAACU,IAAI,CAAC,CAAC,CAElC,GAAI,CAACV,QAAQ,CAACW,EAAE,CAAE,CAChB,KAAM,IAAI,CAAAC,KAAK,CAACH,IAAI,CAACI,MAAM,EAAI,qBAAqB,CAAC,CACvD,CAEA,MAAO,CAAAJ,IAAI,CACb,CAAE,MAAOK,KAAK,CAAE,CACd,KAAM,CAAAA,KAAK,CACb,CACF,CAAC,CAED,MAAO,MAAM,CAAAjB,KAAK,CAAG,KAAAA,CAAOA,KAAK,CAAEC,QAAQ,GAAK,CAC9C,GAAI,CACF,KAAM,CAAAE,QAAQ,CAAG,KAAM,CAAAC,KAAK,IAAAC,MAAA,CAAIP,OAAO,cAAa,CAClDQ,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CAAC,CACDC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CACnBV,KAAK,CACLC,QACF,CAAC,CACH,CAAC,CAAC,CAEF,KAAM,CAAAW,IAAI,CAAG,KAAM,CAAAT,QAAQ,CAACU,IAAI,CAAC,CAAC,CAElC,GAAI,CAACV,QAAQ,CAACW,EAAE,CAAE,CAChB,KAAM,IAAI,CAAAC,KAAK,CAACH,IAAI,CAACI,MAAM,EAAI,cAAc,CAAC,CAChD,CAEA,MAAO,CAAAJ,IAAI,CACb,CAAE,MAAOK,KAAK,CAAE,CACd,KAAM,CAAAA,KAAK,CACb,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}