{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://127.0.0.1:8000';\n\n// Create axios instance with credentials\nconst api = axios.create({\n  baseURL: API_URL,\n  withCredentials: true\n});\n\n// Add response interceptor for handling 401 errors\napi.interceptors.response.use(response => response, async error => {\n  var _error$response;\n  const originalRequest = error.config;\n\n  // If error is 401 and we haven't tried to refresh token yet\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401 && !originalRequest._retry) {\n    originalRequest._retry = true;\n    try {\n      // Try to refresh token\n      await api.post('/refresh');\n      // Retry the original request\n      return api(originalRequest);\n    } catch (refreshError) {\n      // If refresh fails, redirect to login\n      window.location.href = '/login.html';\n      return Promise.reject(refreshError);\n    }\n  }\n  return Promise.reject(error);\n});\nexport const authService = {\n  // Check if user is authenticated\n  async checkAuth() {\n    try {\n      const response = await api.get('/protected');\n      return response.status === 200;\n    } catch (error) {\n      return false;\n    }\n  },\n  // Login user\n  async login(login, password) {\n    try {\n      const response = await api.post('/entrance', {\n        login,\n        password\n      });\n      if (response.status === 200) {\n        window.location.href = '/dashboard.html';\n      }\n      return response;\n    } catch (error) {\n      var _error$response2;\n      if (((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 409) {\n        throw new Error('Неверный логин или пароль');\n      }\n      throw error;\n    }\n  },\n  // Refresh token\n  async refreshToken() {\n    try {\n      const response = await api.post('/refresh');\n      return response.status === 200;\n    } catch (error) {\n      window.location.href = '/login.html';\n      return false;\n    }\n  },\n  // Logout user\n  async logout() {\n    try {\n      await api.post('/logout');\n      window.location.href = '/login.html';\n    } catch (error) {\n      console.error('Logout error:', error);\n    }\n  }\n};","map":{"version":3,"names":["axios","API_URL","api","create","baseURL","withCredentials","interceptors","response","use","error","_error$response","originalRequest","config","status","_retry","post","refreshError","window","location","href","Promise","reject","authService","checkAuth","get","login","password","_error$response2","Error","refreshToken","logout","console"],"sources":["C:/MY_PROJECT/frontend/src/services/authService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = 'http://127.0.0.1:8000';\r\n\r\n// Create axios instance with credentials\r\nconst api = axios.create({\r\n  baseURL: API_URL,\r\n  withCredentials: true,\r\n});\r\n\r\n// Add response interceptor for handling 401 errors\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  async (error) => {\r\n    const originalRequest = error.config;\r\n\r\n    // If error is 401 and we haven't tried to refresh token yet\r\n    if (error.response?.status === 401 && !originalRequest._retry) {\r\n      originalRequest._retry = true;\r\n\r\n      try {\r\n        // Try to refresh token\r\n        await api.post('/refresh');\r\n        // Retry the original request\r\n        return api(originalRequest);\r\n      } catch (refreshError) {\r\n        // If refresh fails, redirect to login\r\n        window.location.href = '/login.html';\r\n        return Promise.reject(refreshError);\r\n      }\r\n    }\r\n\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport const authService = {\r\n  // Check if user is authenticated\r\n  async checkAuth() {\r\n    try {\r\n      const response = await api.get('/protected');\r\n      return response.status === 200;\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  },\r\n\r\n  // Login user\r\n  async login(login, password) {\r\n    try {\r\n      const response = await api.post('/entrance', { login, password });\r\n      if (response.status === 200) {\r\n        window.location.href = '/dashboard.html';\r\n      }\r\n      return response;\r\n    } catch (error) {\r\n      if (error.response?.status === 409) {\r\n        throw new Error('Неверный логин или пароль');\r\n      }\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Refresh token\r\n  async refreshToken() {\r\n    try {\r\n      const response = await api.post('/refresh');\r\n      return response.status === 200;\r\n    } catch (error) {\r\n      window.location.href = '/login.html';\r\n      return false;\r\n    }\r\n  },\r\n\r\n  // Logout user\r\n  async logout() {\r\n    try {\r\n      await api.post('/logout');\r\n      window.location.href = '/login.html';\r\n    } catch (error) {\r\n      console.error('Logout error:', error);\r\n    }\r\n  }\r\n}; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,uBAAuB;;AAEvC;AACA,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACvBC,OAAO,EAAEH,OAAO;EAChBI,eAAe,EAAE;AACnB,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,QAAQ,CAACC,GAAG,CAC1BD,QAAQ,IAAKA,QAAQ,EACtB,MAAOE,KAAK,IAAK;EAAA,IAAAC,eAAA;EACf,MAAMC,eAAe,GAAGF,KAAK,CAACG,MAAM;;EAEpC;EACA,IAAI,EAAAF,eAAA,GAAAD,KAAK,CAACF,QAAQ,cAAAG,eAAA,uBAAdA,eAAA,CAAgBG,MAAM,MAAK,GAAG,IAAI,CAACF,eAAe,CAACG,MAAM,EAAE;IAC7DH,eAAe,CAACG,MAAM,GAAG,IAAI;IAE7B,IAAI;MACF;MACA,MAAMZ,GAAG,CAACa,IAAI,CAAC,UAAU,CAAC;MAC1B;MACA,OAAOb,GAAG,CAACS,eAAe,CAAC;IAC7B,CAAC,CAAC,OAAOK,YAAY,EAAE;MACrB;MACAC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,aAAa;MACpC,OAAOC,OAAO,CAACC,MAAM,CAACL,YAAY,CAAC;IACrC;EACF;EAEA,OAAOI,OAAO,CAACC,MAAM,CAACZ,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,OAAO,MAAMa,WAAW,GAAG;EACzB;EACA,MAAMC,SAASA,CAAA,EAAG;IAChB,IAAI;MACF,MAAMhB,QAAQ,GAAG,MAAML,GAAG,CAACsB,GAAG,CAAC,YAAY,CAAC;MAC5C,OAAOjB,QAAQ,CAACM,MAAM,KAAK,GAAG;IAChC,CAAC,CAAC,OAAOJ,KAAK,EAAE;MACd,OAAO,KAAK;IACd;EACF,CAAC;EAED;EACA,MAAMgB,KAAKA,CAACA,KAAK,EAAEC,QAAQ,EAAE;IAC3B,IAAI;MACF,MAAMnB,QAAQ,GAAG,MAAML,GAAG,CAACa,IAAI,CAAC,WAAW,EAAE;QAAEU,KAAK;QAAEC;MAAS,CAAC,CAAC;MACjE,IAAInB,QAAQ,CAACM,MAAM,KAAK,GAAG,EAAE;QAC3BI,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,iBAAiB;MAC1C;MACA,OAAOZ,QAAQ;IACjB,CAAC,CAAC,OAAOE,KAAK,EAAE;MAAA,IAAAkB,gBAAA;MACd,IAAI,EAAAA,gBAAA,GAAAlB,KAAK,CAACF,QAAQ,cAAAoB,gBAAA,uBAAdA,gBAAA,CAAgBd,MAAM,MAAK,GAAG,EAAE;QAClC,MAAM,IAAIe,KAAK,CAAC,2BAA2B,CAAC;MAC9C;MACA,MAAMnB,KAAK;IACb;EACF,CAAC;EAED;EACA,MAAMoB,YAAYA,CAAA,EAAG;IACnB,IAAI;MACF,MAAMtB,QAAQ,GAAG,MAAML,GAAG,CAACa,IAAI,CAAC,UAAU,CAAC;MAC3C,OAAOR,QAAQ,CAACM,MAAM,KAAK,GAAG;IAChC,CAAC,CAAC,OAAOJ,KAAK,EAAE;MACdQ,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,aAAa;MACpC,OAAO,KAAK;IACd;EACF,CAAC;EAED;EACA,MAAMW,MAAMA,CAAA,EAAG;IACb,IAAI;MACF,MAAM5B,GAAG,CAACa,IAAI,CAAC,SAAS,CAAC;MACzBE,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,aAAa;IACtC,CAAC,CAAC,OAAOV,KAAK,EAAE;MACdsB,OAAO,CAACtB,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;IACvC;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}